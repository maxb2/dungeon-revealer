name: Build Binaries

on:
  push:
    branches: [master] # Run on master or tags
    tags:
      - "v*"

jobs:
  build_x64_native:
    name: ${{ matrix.os }} Binaries
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
        include:
          - os: ubuntu
            runner: ubuntu-20.04
          - os: macos
            runner: macos-latest
          - os: windows
            runner: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Install Dependencies
        run: |
          npm install

      - name: Build Code
        run: |
          npm run build

      - name: Compile x64 binary
        id: compile
        run: |
          node ./scripts/copy-node-bindings-path.js
          npm run compile

      - name: Package binary
        run: |
          mkdir dungeon-revealer-${{ matrix.os }}
          mv ./bin/dungeon-revealer* ./dungeon-revealer-${{ matrix.os }}/
          mv ./node_sqlite3.node ./dungeon-revealer-${{ matrix.os }}/
          mv ./LICENSE ./dungeon-revealer-${{ matrix.os }}/
          mv ./README.md ./dungeon-revealer-${{ matrix.os }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dungeon-revealer-${{ matrix.os }}
          path: "dungeon-revealer-${{ matrix.os }}/"

  build_arm:
    name: ${{ matrix.arch }} Binaries
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        platform: [linux/arm/v7, linux/arm64/v8]
        include:
          - platform: linux/arm/v7
            arch: armv7
            docker_arch: arm32v7
            output: dungeon-revealer-linux-armv7
          - platform: linux/arm64/v8
            arch: arm64
            docker_arch: arm64v8
            output: dungeon-revealer-linux-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.platform }}

      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}

      - name: Enable Docker Experimental Features
        run: |
          echo $'{\n  "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          mkdir -p ~/.docker
          echo $'{\n  "experimental": "enabled"\n}' | sudo tee ~/.docker/config.json
          sudo service docker restart
          docker version -f '{{.Client.Experimental}}'
          docker version -f '{{.Server.Experimental}}'

      - name: Build ${{ matrix.arch }}
        run: |
          # Build app outside of docker
          npm install
          npm run build
          rm -rf node_modules
          FETCH_CMD="mkdir -p ~/.pkg-cache/v2.6 && (cd ~/.pkg-cache/v2.6 && wget https://github.com/dungeon-revealer/pkg-binaries/releases/download/v1.0.0/fetched-v12.18.1-linux-${{ matrix.arch }} -O fetched-v12.18.1-linux-${{ matrix.arch }})"
          CMD="echo 'unsafe-perm = true' > .npmrc && npm install && export NODE_OPTIONS='--max_old_space_size=4000' && node ./scripts/copy-node-bindings-path.js && $FETCH_CMD && npm run compile:${{ matrix.arch }}"
          # Compile in docker container
          docker run --rm --platform ${{ matrix.platform }} -v $PWD:/usr/src/build -w /usr/src/build ${{ matrix.docker_arch }}/node:12.18.1 sh -c "$CMD"

      - name: Package binary
        run: |
          mkdir dungeon-revealer-linux-${{ matrix.arch }}
          mv ./bin/dungeon-revealer-linux ./dungeon-revealer-linux-${{ matrix.arch }}/${{ matrix.output }}
          mv ./node_sqlite3.node ./dungeon-revealer-linux-${{ matrix.arch }}/
          mv ./LICENSE ./dungeon-revealer-linux-${{ matrix.arch }}/
          mv ./README.md ./dungeon-revealer-linux-${{ matrix.arch }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dungeon-revealer-linux-${{ matrix.arch }}
          path: "dungeon-revealer-linux-${{ matrix.arch }}/"

  job_upload:
    name: Upload Release Assets
    needs: [build_x64_native, build_arm]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: "Set environment: Branch" 
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          echo "COMMIT_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GH_TAG=${GITHUB_REF/refs\/heads\//}-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: "Set environment: Tags"
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "COMMIT_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GH_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: bin/

      # Zip all artifacts
      - name: Zip Archives
        run: |
          cd bin
          chmod +x ./dungeon-revealer-macos/dungeon-revealer-macos
          chmod +x ./dungeon-revealer-ubuntu/dungeon-revealer-linux
          chmod +x ./dungeon-revealer-linux-armv7/dungeon-revealer-linux-armv7
          chmod +x ./dungeon-revealer-linux-arm64/dungeon-revealer-linux-arm64
          for idir in */;
          do
            (cd "$idir"; rm dungeon-revealer || true; zip -r "../${idir%/}.zip" .);
          done
          mv dungeon-revealer-ubuntu.zip dungeon-revealer-linux-${{ env.GH_TAG }}.zip
          mv dungeon-revealer-macos.zip dungeon-revealer-macos-${{ env.GH_TAG }}.zip
          mv dungeon-revealer-windows.zip dungeon-revealer-windows-${{ env.GH_TAG }}.zip
          mv dungeon-revealer-linux-armv7.zip dungeon-revealer-linux-armv7-${{ env.GH_TAG }}.zip
          mv dungeon-revealer-linux-arm64.zip dungeon-revealer-linux-arm64-${{ env.GH_TAG }}.zip

      - name: Upload Zip Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dungeon-revealer-binaries-${{ github.sha }}
          path: "bin/*.zip"

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Release ${{ github.ref }}
          draft: true
          files: |
            bin/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Set environment for discord"
        if: success() && startsWith( github.ref, 'refs/heads')
        run: |
          # Template json to send as an embed
          # jq replaces $var with `jq --arg var <value> "$TEMPLATE"`
          TEMPLATE='[{"title": $title, "url": $url, "color": $color, "description": $desc}]'

          # Grab the list of commits from event.json
          COMMITS=$(cat $GITHUB_EVENT_PATH | jq -c '.commits')

          # Iterate through each commit and create the formatted string:
          # [`<commit_sha_short>`](<commit_url>) <commit_message>\n <other_commits>
          DESC=''
          for row in $(echo "${COMMITS}" | jq -r '.[] | @base64'); do
              _jq() {
               echo ${row} | base64 --decode | jq -r ${1}
              }
             DESC=$DESC$(printf "[%s](%s) %s" $'`'"$(_jq '.id' | cut -c -7)"$'`' "$(_jq '.url')" "$(_jq '.message')")$'\n'
          done

          # Check if description is longer than the character limit
          if [ ${#DESC} -gt 2048 ]; then
            DESC=$(echo $DESC | cut -c -2045)"..."
          fi
          echo "$DESC"
          echo "DISCORD_EMBEDS=$(jq -nc --arg title "[${{ github.event.repository.name }}:${GITHUB_REF##*/}] binary build" --arg url "${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}" --arg color "16750848" --arg desc "$DESC" "$TEMPLATE")" >> $GITHUB_ENV

      - name: Discord notification
        if: success() && startsWith( github.ref, 'refs/heads')
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_UPDATES }}
        uses: Ilshidur/action-discord@0.3.0
